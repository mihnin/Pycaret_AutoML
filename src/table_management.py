import streamlit as st
import pandas as pd
from sqlalchemy import create_engine, text
import contextlib
import re
from typing import Optional
import io

@contextlib.contextmanager
def create_db_engine(host, port, dbname, user, password):
    engine = create_engine(f'postgresql://{user}:{password}@{host}:{port}/{dbname}')
    try:
        yield engine
    finally:
        engine.dispose()

def is_valid_table_name(name: str) -> bool:
    return bool(re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', name))

def load_large_csv(file_obj, chunksize=10000):
    chunks = pd.read_csv(file_obj, chunksize=chunksize)
    return pd.concat(chunks)

def save_dataframe_to_db(df: pd.DataFrame, table_name: str, engine, if_exists='replace'):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    dtype_mapping = {
        'int64': 'INTEGER',
        'float64': 'FLOAT',
        'object': 'TEXT',
        'datetime64[ns]': 'TIMESTAMP',
        'bool': 'BOOLEAN'
    }
    
    column_types = {col: dtype_mapping.get(str(dtype), 'TEXT') 
                   for col, dtype in df.dtypes.items()}
    
    df.to_sql(table_name, engine, if_exists=if_exists, 
              index=False, dtype=column_types)

def table_management_page(engine):
    st.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–∞–º–∏")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é engine –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        tab1, tab2 = st.tabs(["–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–∞–º–∏"])
        
        with tab1:
            handle_data_upload(engine)
        
        with tab2:
            handle_table_management(engine)
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

def handle_data_upload(engine):
    st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV")
    uploaded_file = st.file_uploader("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª", type="csv")
    
    if uploaded_file:
        try:
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
                data = load_large_csv(uploaded_file)
            st.success("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
            st.dataframe(data.head())
            
            table_name = st.text_input("–ò–º—è —Ç–∞–±–ª–∏—Ü—ã")
            if table_name and not is_valid_table_name(table_name):
                st.error("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã")
                return
            
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", type="primary", disabled=not table_name):
                with st.spinner("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..."):
                    save_dataframe_to_db(data, table_name, engine)
                st.success("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")

def handle_table_management(engine):
    st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
    try:
        query = "SELECT table_name FROM information_schema.tables WHERE table_schema='public'"
        tables = pd.read_sql(query, engine)['table_name'].tolist()
        
        if tables:
            selected_table = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É", tables)
            
            if selected_table:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
                query = f"SELECT * FROM {selected_table}"
                df = pd.read_sql(query, engine)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Ç–∞–±–ª–∏—Ü–µ
                st.subheader(f"–î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {selected_table}")
                edited_df = st.data_editor(df)
                
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
                        try:
                            edited_df.to_sql(selected_table, engine, if_exists='replace', index=False)
                            st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
                
                with col2:
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"):
                        try:
                            with engine.connect() as conn:
                                conn.execute(f"DROP TABLE {selected_table}")
                            st.success(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {selected_table} —É–¥–∞–ª–µ–Ω–∞")
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        else:
            st.info("üìù –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö'")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}")
