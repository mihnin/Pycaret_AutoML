# -*- coding: utf-8 -*-
"""Tutorial - Anomaly Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/pycaret/pycaret/blob/master/tutorials/Tutorial%20-%20Anomaly%20Detection.ipynb

Last updated: 15 Feb 2023

# üëã PyCaret Anomaly Detection Tutorial

PyCaret is an open-source, low-code machine learning library in Python that automates machine learning workflows. It is an end-to-end machine learning and model management tool that exponentially speeds up the experiment cycle and makes you more productive.

Compared with the other open-source machine learning libraries, PyCaret is an alternate low-code library that can be used to replace hundreds of lines of code with a few lines only. This makes experiments exponentially fast and efficient. PyCaret is essentially a Python wrapper around several machine learning libraries and frameworks, such as scikit-learn, XGBoost, LightGBM, CatBoost, spaCy, Optuna, Hyperopt, Ray, and a few more.

The design and simplicity of PyCaret are inspired by the emerging role of citizen data scientists, a term first used by Gartner. Citizen Data Scientists are power users who can perform both simple and moderately sophisticated analytical tasks that would previously have required more technical expertise.

# üíª Installation

PyCaret is tested and supported on the following 64-bit systems:
- Python 3.7 ‚Äì 3.10
- Python 3.9 for Ubuntu only
- Ubuntu 16.04 or later
- Windows 7 or later

You can install PyCaret with Python's pip package manager:

`pip install pycaret`

PyCaret's default installation will not install all the extra dependencies automatically. For that you will have to install the full version:

`pip install pycaret[full]`

or depending on your use-case you may install one of the following variant:

- `pip install pycaret[analysis]`
- `pip install pycaret[models]`
- `pip install pycaret[tuner]`
- `pip install pycaret[mlops]`
- `pip install pycaret[parallel]`
- `pip install pycaret[test]`
"""

# check installed version
import pycaret
pycaret.__version__

"""# üöÄ Quick start

PyCaret‚Äôs Anomaly Detection Module is an unsupervised machine learning module that is used for identifying rare items, events, or observations that raise suspicions by differing significantly from the majority of the data.

Typically, the anomalous items will translate to some kind of problems such as bank fraud, a structural defect, medical problems, or errors.

PyCaret's Anomaly Detection module provides several pre-processing features to prepare the data for modeling through the `setup` function. It has over 10 ready-to-use algorithms and few plots to analyze the performance of trained models.

A typical workflow in PyCaret's unsupervised module consist of following 6 steps in this order:

**Setup** ‚û°Ô∏è **Create Model** ‚û°Ô∏è **Assign Labels** ‚û°Ô∏è **Analyze Model** ‚û°Ô∏è **Prediction** ‚û°Ô∏è **Save Model**
"""

# loading sample dataset from pycaret dataset module
from pycaret.datasets import get_data
data = get_data('anomaly')

"""## Setup
This function initializes the training environment and creates the transformation pipeline. The setup function must be called before executing any other function. It takes one mandatory parameter only: data. All the other parameters are optional.
"""

# import pycaret anomaly and init setup
from pycaret.anomaly import *
s = setup(data, session_id = 123)

"""Once the setup has been successfully executed it shows the information grid containing experiment level information.

- **Session id:**  A pseudo-random number distributed as a seed in all functions for later reproducibility. If no `session_id` is passed, a random number is automatically generated that is distributed to all functions.<br/>
<br/>
- **Original data shape:**  Shape of the original data prior to any transformations. <br/>
<br/>
- **Transformed data shape:**  Shape of data after transformations <br/>
<br/>
- **Numeric features :**  The number of features considered as numerical. <br/>
<br/>
- **Categorical features :**  The number of features considered as categorical. <br/>

PyCaret has two set of API's that you can work with. (1) Functional (as seen above) and (2) Object Oriented API.

With Object Oriented API instead of executing functions directly you will import a class and execute methods of class.
"""

# import AnomalyExperiment and init the class
from pycaret.anomaly import AnomalyExperiment
exp = AnomalyExperiment()

# check the type of exp
type(exp)

# init setup on exp
exp.setup(data, session_id = 123)

"""You can use any of the two method i.e. Functional or OOP and even switch back and forth between two set of API's. The choice of method will not impact the results and has been tested for consistency.

## Create Model

This function trains an unsupervised anomaly detection model. All the available models can be accessed using the models function.
"""

# train iforest model
iforest = create_model('iforest')
iforest

# to check all the available models
models()

"""## Assign Model
This function assigns anomaly labels to the training data, given a trained model.
"""

iforest_anomalies = assign_model(iforest)
iforest_anomalies

"""## Analyze Model

You can use the `plot_model` function to analyzes the performance of a trained model on the test set. It may require re-training the model in certain cases.
"""

# tsne plot anomalies
plot_model(iforest, plot = 'tsne')

# check docstring to see available plots
# help(plot_model)

"""An alternate to `plot_model` function is `evaluate_model`. It can only be used in Notebook since it uses ipywidget."""

evaluate_model(iforest)

"""## Prediction
The `predict_model` function returns `Anomaly` and `Anomaly_Score` label as a new column in the input dataframe. This step may or may not be needed depending on the use-case. Some times clustering models are trained for analysis purpose only and the interest of user is only in assigned labels on the training dataset, that can be done using `assign_model` function. `predict_model` is only useful when you want to obtain cluster labels on unseen data (i.e. data that was not used during training the model).
"""

# predict on test set
iforest_pred = predict_model(iforest, data=data)
iforest_pred

"""The same function works for predicting the labels on unseen dataset. Let's create a copy of original data and drop the `Class variable`. We can then use the new data frame without labels for scoring.

## Save Model

Finally, you can save the entire pipeline on disk for later use, using pycaret's `save_model` function.
"""

# save pipeline
save_model(iforest, 'iforest_pipeline')

# load pipeline
loaded_iforest_pipeline = load_model('iforest_pipeline')
loaded_iforest_pipeline

"""# üëá Detailed function-by-function overview

## ‚úÖ Setup
This function initializes the training environment and creates the transformation pipeline. The setup function must be called before executing any other function. It takes one mandatory parameter only: data. All the other parameters are optional.
"""

s = setup(data, session_id = 123)

"""To access all the variables created by the setup function such as transformed dataset, random_state, etc. you can use `get_config` method."""

# check all available config
get_config()

# lets access X_train_transformed
get_config('X_train_transformed')

# another example: let's access seed
print("The current seed is: {}".format(get_config('seed')))

# now lets change it using set_config
set_config('seed', 786)
print("The new seed is: {}".format(get_config('seed')))

"""All the preprocessing configurations and experiment settings/parameters are passed into the `setup` function. To see all available parameters, check the docstring:"""

# help(setup)

# init setup with bin_numeric_feature

s = setup(data, session_id = 123,
          bin_numeric_features=['Col1'])

# lets check the X_train_transformed to see effect of params passed
get_config('X_train_transformed')['Col1'].hist()

"""Notice that `Col1` originally was a numeric feature with a continuous distribution. After transformation it is now converted into categorical feature. We can also access non-transformed values using `get_config` and then compare the differences."""

get_config('X_train')['Col1'].hist()

"""## ‚úÖ Experiment Logging
PyCaret integrates with many different type of experiment loggers (default = 'mlflow'). To turn on experiment tracking in PyCaret you can set `log_experiment` and `experiment_name` parameter. It will automatically track all the metrics, hyperparameters, and artifacts based on the defined logger.
"""

# from pycaret.anomaly import *
# s = setup(data, session_id = 123, log_experiment='mlflow', experiment_name='anomaly_project')

# train iforest
# iforest = create_model('iforest')

# start mlflow server on localhost:5000
# !mlflow ui

"""By default PyCaret uses `MLFlow` logger that can be changed using `log_experiment` parameter. Following loggers are available:
    
    - mlflow
    - wandb
    - comet_ml
    - dagshub
    
Other logging related parameters that you may find useful are:

- experiment_custom_tags
- log_plots
- log_data
- log_profile

For more information check out the docstring of the `setup` function.
"""

# help(setup)

"""## ‚úÖ Create Model
This function trains an unsupervised anomaly detection model. All the available models can be accessed using the models function.
"""

# check all the available models
models()

# train iforest model
iforest = create_model('iforest')

iforest

# train iforest with specific model parameter
create_model('iforest', contamination = 0.1)

# help(create_model)

"""## ‚úÖ Assign Model
This function assigns anomaly labels to the dataset for a given model. (1 = outlier, 0 = inlier).
"""

iforest_results = assign_model(iforest)
iforest_results

# help(assign_model)

"""## ‚úÖ Plot Model"""

# tsne plot of anomalies
plot_model(iforest, plot = 'tsne')

# umap plot of anomalies (you need to install umap library for this separately)
# plot_model(iforest, plot = 'umap')

# help(plot_model)

"""## ‚úÖ Deploy Model
This function deploys the entire ML pipeline on the cloud.

**AWS:**  When deploying model on AWS S3, environment variables must be configured using the command-line interface. To configure AWS environment variables, type `aws configure` in terminal. The following information is required which can be generated using the Identity and Access Management (IAM) portal of your amazon console account:

- AWS Access Key ID
- AWS Secret Key Access
- Default Region Name (can be seen under Global settings on your AWS console)
- Default output format (must be left blank)

**GCP:** To deploy a model on Google Cloud Platform ('gcp'), the project must be created using the command-line or GCP console. Once the project is created, you must create a service account and download the service account key as a JSON file to set environment variables in your local environment. Learn more about it: https://cloud.google.com/docs/authentication/production

**Azure:** To deploy a model on Microsoft Azure ('azure'), environment variables for the connection string must be set in your local environment. Go to settings of storage account on Azure portal to access the connection string required.
AZURE_STORAGE_CONNECTION_STRING (required as environment variable)
Learn more about it: https://docs.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-python?toc=%2Fpython%2Fazure%2FTOC.json
"""

# deploy model on aws s3
# deploy_model(iforest, model_name = 'my_first_platform_on_aws',
#             platform = 'aws', authentication = {'bucket' : 'pycaret-test'})

# load model from aws s3
# loaded_from_aws = load_model(model_name = 'my_first_platform_on_aws', platform = 'aws',
#                              authentication = {'bucket' : 'pycaret-test'})

# loaded_from_aws

"""## ‚úÖ Save / Load Model
This function saves the transformation pipeline and a trained model object into the current working directory as a pickle file for later use.
"""

# save model
save_model(iforest, 'my_first_model')

# load model
loaded_from_disk = load_model('my_first_model')
loaded_from_disk

"""## ‚úÖ Save / Load Experiment
This function saves all the experiment variables on disk, allowing to later resume without rerunning the setup function.
"""

# save experiment
save_experiment('my_experiment')

# load experiment from disk
exp_from_disk = load_experiment('my_experiment', data=data)

